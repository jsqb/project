public class Solution {
	public static void main(String[] args) {
		Test.assertEquals(2, countDivisors(13)); // 1, 13
		Test.assertEquals(4, countDivisors(14)); // 1,2,7,14
		Test.assertEquals(8, countDivisors(24)); // 1,2,3,4,6,8,12,24
		Test.assertEquals(9, countDivisors(36)); // 1,2,3,4,6,9,12,18,36
		Test.printResults();

/*
		Test.assertEquals(true, testPrimality(1));
		Test.assertEquals(true, testPrimality(2));
		Test.assertEquals(true, testPrimality(3));
		Test.assertEquals(false, testPrimality(4));
		Test.assertEquals(true, testPrimality(5));
		Test.assertEquals(false, testPrimality(6));
		Test.assertEquals(true, testPrimality(7));
		Test.assertEquals(false, testPrimality(8));
		Test.assertEquals(false, testPrimality(9));
		Test.assertEquals(false, testPrimality(10));
		Test.printResults();

		Test.assertEquals(3, reverseCoins(10));
		Test.printResults();
*/
	}

	// Counting the number of divisors
	// 8.1 O(sqrt(N))
	private static int countDivisors(int n) {
		int count = 0, i = 1;
		for (; i*i < n; i++) {
			if (n % i == 0) count += 2;
		}
		return count + (i*i==n ? 1 : 0);
	}

	// Primality test
	// 8.2 O(sqrt(N))
	private static boolean testPrimality(int n) {
		int i = 2;
		while (i * i <= n) {
			if (n % i == 0) return false;
			i++;
		}
		return true;
	}

}
