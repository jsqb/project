import java.util.*;
public class DFS {
	public static void main(String[] args) {
		new DFS().test();
	}

	private void test() {
		Node a = new Node("a");
		Node b = new Node("b");
		Node c = new Node("c");
		Node d = new Node("d");
		Node e = new Node("e");
		Node f = new Node("f");

		a.addChild(b);
		a.addChild(c);
		c.addChild(d);
		c.addChild(e);
		b.addChild(f);

		dfs(a);
	}

	private void dfs(Node start) {
		Stack<Node> s = new Stack<Node>();
		s.push(start);

		while (!s.isEmpty()) {
			Node top = s.pop();
			System.out.println("node:"+top.id);

			if (!top.hasVisited && "f".equals(top.id)) {
				System.out.println("Found node f");
				return;
			}

			top.hasVisited = true;

			for (Node ch : top.childNodes) {
				s.push(ch);
			}
		}
	}

	private class Node {
		String id;
		boolean hasVisited = false;
		List<Node> childNodes = new ArrayList<Node>();

		public Node(String id) {
			this.id = id;
		}

		public void addChild(Node n) {
			childNodes.add(n);
		}
	}

}
